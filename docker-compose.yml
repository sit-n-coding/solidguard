version: "3.8"
services:

  portainer:
    container_name: solidguard_portainer
    image: portainer/portainer-ce:2.0.0
    command: -H unix:///var/run/docker.sock
    restart: always
    networks:
      - solidguard
    expose:
      - "9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

  metabase:
    container_name: solidguard_metabase
    restart: "always"
    image: metabase/metabase
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - JAVA_TIMEZONE=US/Eastern
      - MB_ENCRYPTION_SECRET_KEY=${METABASE_SECRET}
      - MB_DB_TYPE=postgres
      - MB_DB_PASS=${POSTGRES_PASSWORD}
      - MB_DB_USER=${POSTGRES_USER}
      - MB_DB_HOST=${POSTGRES_HOST}
      - MB_DB_PORT=${POSTGRES_PORT}
      - MB_DB_DBNAME=${POSTGRES_DB}
    expose:
      - "3000"
    networks:
      - solidguard

  proxy:
    container_name: solidguard_proxy
    image: nginx:1.21.6-alpine
    restart: always
    depends_on:
      - api
      - client
    ports:
      - "443:443"
    volumes:
      - ./proxy/:/etc/nginx/conf.d/:ro
      - ./proxy/certs/:/etc/nginx/certs/
    networks:
      - solidguard

  client:
    container_name: solidguard_client
    build:
      context: client/
      dockerfile: Dockerfile
    hostname: client
    depends_on:
      - api
    expose:
      - "3000"
    networks:
      - solidguard

  api:
    container_name: solidguard_api
    build:
      context: ./api
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    hostname: api
    environment:
      PORT: 3001
    expose:
      - "3001"
    networks:
      - solidguard

  postgres:
    container_name: solidguard_postgres
    image: postgres
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U '${POSTGRES_USER}' -d '$POSTGRES_DB' -h '$POSTGRES_HOST'"
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - solidguard

  redis:
    container_name: solidguard_redis
    image: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    networks:
      - solidguard

networks:
  solidguard:

volumes:
  portainer_data:
  postgres_data:
  redis_data:
